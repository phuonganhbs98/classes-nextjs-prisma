datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Class {
  id               Int                  @id @default(autoincrement())
  name             String
  capacity         Int
  status           ClassStatus          @default(PREPARE)
  teacher          User                 @relation(fields: [teacherId], references: [id])
  teacherId        Int
  students         ClassroomToStudent[]
  registerRequests Register[]
  schedules        Schedule[]
  assignments      Assignment[]
  achievements     Achievement[]
  startAt          DateTime             @map(name: "start_at")
  endAt            DateTime             @map(name: "end_at")

  TimetableClass TimetableClass[]
  @@map(name: "classes")
}

model Register {
  id        Int            @id @default(autoincrement())
  status    RegisterStatus @default(REGISTERED)
  studentId Int
  student   User           @relation(fields: [studentId], references: [id])
  classId   Int
  classroom Class          @relation(fields: [classId], references: [id])

  @@unique([studentId, classId])
  @@map(name: "register_requests")
}

model ClassroomToStudent {
  studentId Int
  student   User  @relation(fields: [studentId], references: [id])
  classId   Int
  classroom Class @relation(fields: [classId], references: [id])

  @@id([studentId, classId])
}

model User {
  id               Int                  @id @default(autoincrement())
  name             String?
  email            String               @unique
  emailVerified    DateTime?            @map(name: "email_verified")
  password         String?
  role             Role                 @default(STUDENT)
  image            String?
  birthDate        DateTime?            @map(name: "date_birth")
  gender           Gender?
  phoneNumber      String?              @map(name: "phone_number")
  registerRequests Register[]
  createdClasses   Class[]
  acceptedClasses  ClassroomToStudent[]
  achievements     Achievement[]
  assignments      Assignment[]
  answers          Answer[]
  timetableStu     TimetableStudent[]
  timetableClass   TimetableClass[]
  createdAt        DateTime             @default(now()) @map(name: "created_at")
  updatedAt        DateTime             @updatedAt @map(name: "updated_at")
  attendance       Attendance[]

  @@map(name: "users")
}

model Schedule {
  id        Int      @id @default(autoincrement())
  startAt   DateTime @map(name: "start_at")
  endAt     DateTime @map(name: "end_at")
  dayInWeek Int
  class     Class    @relation(fields: [classId], references: [id])
  classId   Int

  @@map(name: "schedules")
}

model Assignment {
  id         Int              @id @default(autoincrement())
  title      String
  content    String           @db.LongText
  attachment String?
  deadline   DateTime?
  answers    Answer[]
  status     AssignmentStatus @default(ASSIGNED)
  createdAt  DateTime         @default(now()) @map(name: "created_at")
  teacher    User             @relation(fields: [teacherId], references: [id])
  teacherId  Int
  class      Class            @relation(fields: [classId], references: [id])
  classId    Int

  @@map(name: "assignments")
}

model Answer {
  id           Int           @id @default(autoincrement())
  content      String        @db.LongText
  attachment   String?
  score        Float?
  student      User          @relation(fields: [studentId], references: [id])
  studentId    Int
  assignment   Assignment    @relation(fields: [assignmentId], references: [id])
  assignmentId Int
  status       AnswerStatus?
  Comment      Comment[]
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  updatedAt    DateTime      @default(now()) @map(name: "updated_at")

  @@unique([studentId, assignmentId])
  @@map(name: "answers")
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  author    String
  answerId  Int
  answer    Answer   @relation(fields: [answerId], references: [id])
  avatar    String?
  content   String   @db.LongText
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map("comments")
}

model Achievement {
  id        Int   @id @default(autoincrement())
  score     Float @default(0)
  student   User  @relation(fields: [studentId], references: [id])
  studentId Int
  class     Class @relation(fields: [classId], references: [id])
  classId   Int

  @@map(name: "achievements")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model TimetableClass {
  id               Int                @id @default(autoincrement())
  title            String
  start            DateTime?
  end              DateTime?
  classId          Int
  classroom        Class              @relation(fields: [classId], references: [id])
  teacherId        Int
  teacher          User               @relation(fields: [teacherId], references: [id])
  TimetableStudent TimetableStudent[]

  @@map("timetable_classes")
}

model TimetableStudent {
  id          Int            @id @default(autoincrement())
  timeTableId Int
  timeTable   TimetableClass @relation(fields: [timeTableId], references: [id])
  studentId   Int
  student     User           @relation(fields: [studentId], references: [id])

  @@unique([timeTableId, studentId])
  @@map("timetable_students")
}

model Attendance {
  id        Int               @id @default(autoincrement())
  classId   Int
  time      String
  studentId Int
  student   User              @relation(fields: [studentId], references: [id])
  status    AttendanceStatus?

  @@map("attendances")
}

enum Role {
  TEACHER
  STUDENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ClassStatus {
  PREPARE
  STUDYING
  FINISHED
}

enum RegisterStatus {
  REGISTERED
  ACCEPTED
}

enum AssignmentStatus {
  ASSIGNED
  EXPIRED
}

enum AnswerStatus {
  SUBMITTED
  LATE
}

enum AttendanceStatus {
  P
  L
  UA
  AA
}
